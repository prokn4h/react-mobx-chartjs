{"version":3,"sources":["AppState.tsx","components/Chart.tsx","App.tsx","index.tsx"],"names":["AppState","Object","classCallCheck","this","colors","selectedColor","randomScalingFactor","Math","random","round","createClass","key","value","color","get","responsive","spangaps","scales","xAxes","position","type","gridLines","scaleLabel","display","labelString","ticks","maxRotation","reverse","yAxes","annotation","events","annotations","drawTime","id","mode","scaleID","borderColor","borderWidth","draggable","label","backgroundColor","content","enabled","onClick","e","onDrag","event","onDragEnd","labels","category","datasets","data","x","y","fill","decorate","observable","selectColor","action","getData","computed","getChartOptions","Chart","observer","store","react_default","a","createElement","es","options","toJS","Component","App","App_class","_Component","_getPrototypeOf2","_this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","inherits","mobx_react_module","style","width","height","components_Chart","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.6a2d2097.chunk.js","sourcesContent":["import { observable, action, decorate, computed } from \"mobx\";\r\n\r\nexport class AppState {\r\n    colors = [\r\n        \"rgba(55, 55, 55, 0.75)\",\r\n        \"rgba(155, 155, 0, 0.75)\",\r\n        \"rgba(0, 66, 55, 0.75)\"\r\n    ];\r\n\r\n    selectedColor = \"rgba(55, 55, 55, 0.75)\";\r\n\r\n    randomScalingFactor = function () {\r\n        return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100);\r\n    };\r\n\r\n\r\n    selectColor(color: string) {\r\n        //debugger;\r\n        this.selectedColor = color;\r\n    }\r\n\r\n    get getChartOptions() {\r\n        return {\r\n            responsive: true,\r\n            spangaps: true,\r\n            scales: {\r\n                xAxes: [{\r\n                    position: 'bottom',\r\n                    type: 'linear',\r\n                    gridLines: {\r\n                        //zeroLineColor: \"rgba(0,255,0,1)\"\r\n                    },\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'x axis'\r\n                    },\r\n                    ticks: {\r\n                        maxRotation: 0,\r\n                        reverse: false\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    position: 'left',\r\n                    gridLines: {\r\n                        //zeroLineColor: \"rgba(0,255,0,1)\"\r\n                    },\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'y axis'\r\n                    },\r\n                    ticks: {\r\n                        reverse: false\r\n                    }\r\n                }]\r\n            },\r\n            annotation: {\r\n                events: ['click', 'onMouseup'],\r\n                annotations: [\r\n                    {\r\n                        drawTime: \"afterDatasetsDraw\",\r\n                        id: \"hline\",\r\n                        type: \"line\",\r\n                        mode: \"vertical\",\r\n                        scaleID: \"x-axis-0\",\r\n                        value: 3,\r\n                        borderColor: this.selectedColor,\r\n                        borderWidth: 5,\r\n                        draggable: true,\r\n                        label: {\r\n                            backgroundColor: this.selectedColor,\r\n                            content: \"Selector 1\",\r\n                            enabled: true,\r\n                            position: 'bottom'\r\n                        },\r\n                        onClick: function (e: React.FormEvent<HTMLInputElement>) {\r\n                            //console.log(\"Annotation\", e.type, this);\r\n                        },\r\n                        onDrag: function (event: any) {\r\n                            //console.log(event);                                            \r\n                        },\r\n                        onDragEnd: function (event: any) {\r\n\r\n                        }\r\n                    }, {\r\n                        drawTime: \"afterDatasetsDraw\",\r\n                        id: \"hline2\",\r\n                        type: \"line\",\r\n                        mode: \"vertical\",\r\n                        scaleID: \"x-axis-0\",\r\n                        value: 6,\r\n                        borderColor: this.selectedColor,\r\n                        borderWidth: 5,\r\n                        draggable: true,\r\n                        label: {\r\n                            backgroundColor: this.selectedColor,\r\n                            content: \"Selector 2\",\r\n                            enabled: true,\r\n                            position: 'bottom'\r\n                        },\r\n                        onClick: function (e: React.FormEvent<HTMLInputElement>) {\r\n                            //console.log(\"Annotation\", e.type, this);\r\n                        },\r\n                        onDrag: function (e: React.FormEvent<HTMLInputElement>) {\r\n                            //console.log(e.subject.config.value);\r\n                        },\r\n                        onDragEnd: function (event: any) {\r\n\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    get getData() {\r\n        return {\r\n            labels: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"],\r\n            category: 'linear',\r\n            datasets: [\r\n                {\r\n                    label: \"Dataset 1\",\r\n                    backgroundColor: this.selectedColor,\r\n                    borderColor: this.selectedColor,\r\n                    data: [{\r\n                        x: 0,\r\n                        y: 2,\r\n                    }, {\r\n                        x: 2,\r\n                        y: 4,\r\n                    }, {\r\n                        x: 4,\r\n                        y: 3,\r\n                    }, {\r\n                        x: 7,\r\n                        y: 3,\r\n                    }, {\r\n                        x: null,\r\n                        y: null,\r\n                    }, {\r\n                        x: 9,\r\n                        y: 3,\r\n                    }, {\r\n                        x: 10,\r\n                        y: 3,\r\n                    }],\r\n                    fill: true,\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\ndecorate(AppState, {\r\n    colors: observable,\r\n    selectedColor: observable,\r\n    selectColor: action,\r\n    getData: computed,\r\n    getChartOptions: computed\r\n});","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { AppState } from '../AppState';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { toJS } from 'mobx';\r\nimport 'chartjs-plugin-annotation';\r\nimport 'chartjs-plugin-draggable';\r\n\r\n//@inject(\"store\")\r\n@observer\r\nclass Chart extends Component<{ store?: AppState }> {\r\n    // constructor(props: { store?: AppState }) {\r\n    //     super(props);\r\n    // }\r\n\r\n    store = new AppState();\r\n\r\n    render() {\r\n        return (\r\n            <Line\r\n                options={toJS(this.store.getChartOptions)}\r\n                data={toJS(this.store.getData)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Chart;","import React, { Component } from 'react';\r\nimport { AppState } from './AppState';\r\nimport { Provider, observer } from 'mobx-react';\r\nimport Chart from './components/Chart'\r\nimport SelectColor from './components/SelectColor';\r\n\r\n@observer\r\nexport class App extends Component<any> {\r\n\r\n    store = new AppState();\r\n\r\n    render() {\r\n        return (\r\n            <Provider store={this.store}>\r\n                <div style={{ position: \"relative\", width: 600, height: 550 }}>\r\n                    {/* <SelectColor /> */}\r\n                    <Chart />\r\n                </div>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}