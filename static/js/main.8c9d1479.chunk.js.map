{"version":3,"sources":["AppState.tsx","components/Chart.tsx","App.tsx","index.tsx"],"names":["AppState","_class","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","annotationKey","createClass","key","get","_this","key1","key2","legend","display","responsive","spangaps","scales","xAxes","position","type","gridLines","scaleLabel","labelString","ticks","maxRotation","reverse","yAxes","beginAtZero","min","max","annotation","events","annotations","drawTime","id","mode","scaleID","value","history","length","x1","borderColor","selectedColor","borderWidth","draggable","label","backgroundColor","content","enabled","onClick","e","onDrag","event","onDragEnd","subject","element","options","addToHistory","x2","labels","category","datasets","data","x","y","fill","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","_this2","newX1","newX2","push","_this3","pop","_this4","color","computed","getOwnPropertyDescriptor","Chart","observer","store","react_default","a","createElement","mobx_react_module","es","toJS","getChartOptions","getData","undo","Component","App","App_class","_Component","_getPrototypeOf2","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","inherits","style","width","height","components_Chart","ReactDOM","render","src_App","document","getElementById"],"mappings":"4NAEaA,GAAbC,EAAA,oBAAAD,IAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAA,SAAAE,EAAAF,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,gBAAAG,EAAAH,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,UAAAI,EAAAJ,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,eAAAK,EAAAL,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,OAAAM,EAAAN,MAAAF,OAAAG,EAAA,EAAAH,CAAAE,KAAA,cAAAO,EAAAP,WAuCIQ,cAAgB,EAvCpB,OAAAV,OAAAW,EAAA,EAAAX,CAAAF,EAAA,EAAAc,IAAA,kBAAAC,IAAA,WA0C0B,IAAAC,EAAAZ,KACda,EAAO,IAAMb,KAAKQ,gBAClBM,EAAO,IAAMd,KAAKQ,gBACtB,MAAO,CACHO,OAAQ,CACJC,SAAS,GAEbC,YAAY,EACZC,UAAU,EACVC,OAAQ,CACJC,MAAO,CAAC,CACJC,SAAU,SACVC,KAAM,SACNC,UAAW,GAGXC,WAAY,CACRR,SAAS,EACTS,YAAa,UAEjBC,MAAO,CACHC,YAAa,EACbC,SAAS,KAGjBC,MAAO,CAAC,CACJR,SAAU,OACVE,UAAW,GAGXC,WAAY,CACRR,SAAS,EACTS,YAAa,UAEjBC,MAAO,CACHE,SAAS,EACTE,aAAa,EACbC,IAAK,EACLC,IAAK,OAIjBC,WAAY,CACRC,OAAQ,CAAC,QAAS,aAClBC,YAAa,CACT,CACIC,SAAU,oBACVC,GAAIxB,EACJS,KAAM,OACNgB,KAAM,WACNC,QAAS,WACTC,MAAOxC,KAAKyC,QAAQzC,KAAKyC,QAAQC,OAAS,GAAGC,GAC7CC,YAAa5C,KAAK6C,cAClBC,YAAa,EACbC,WAAW,EACXC,MAAO,CACHC,gBAAiBjD,KAAK6C,cACtBK,QAAS,aACTC,SAAS,EACT9B,SAAU,UAEd+B,QAAS,SAAUC,KAGnBC,OAAQ,SAAUC,KAGlBC,UAAW,SAACD,GACR,IAAIf,EAAQe,EAAME,QAAQC,QAAQC,QAAQnB,MAC1C5B,EAAKgD,aAAapB,EAAO5B,EAAK6B,QAAQ7B,EAAK6B,QAAQC,OAAS,GAAGmB,MAGpE,CACCzB,SAAU,oBACVC,GAAIvB,EACJQ,KAAM,OACNgB,KAAM,WACNC,QAAS,WACTC,MAAOxC,KAAKyC,QAAQzC,KAAKyC,QAAQC,OAAS,GAAGmB,GAC7CjB,YAAa5C,KAAK6C,cAClBC,YAAa,EACbC,WAAW,EACXC,MAAO,CACHC,gBAAiBjD,KAAK6C,cACtBK,QAAS,aACTC,SAAS,EACT9B,SAAU,UAEd+B,QAAS,SAAUC,KAGnBC,OAAQ,SAAUD,KAGlBG,UAAW,SAACD,GACR,IAAIf,EAAQe,EAAME,QAAQC,QAAQC,QAAQnB,MAC1C5B,EAAKgD,aAAahD,EAAK6B,QAAQ7B,EAAK6B,QAAQC,OAAS,GAAGC,GAAIH,UA1IxF,CAAA9B,IAAA,UAAAC,IAAA,WAqJQ,MAAO,CACHmD,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACvCC,SAAU,SACVC,SAAU,CACN,CACIhB,MAAO,YACPC,gBAAiB,4BACjBL,YAAa,4BACbqB,KAAM,CAAC,CACHC,EAAG,EACHC,EAAG,GACJ,CACCD,EAAG,EACHC,EAAG,GACJ,CACCD,EAAG,EACHC,EAAG,IAEPC,MAAM,GACR,CACEpB,MAAO,YACPC,gBAAiB,4BACjBL,YAAa,4BACbqB,KAAM,CAAC,CACHC,EAAG,EACHC,EAAG,GACJ,CACCD,EAAG,EACHC,EAAG,GACJ,CACCD,EAAG,EACHC,EAAG,IAEPC,MAAM,GACR,CACEpB,MAAO,YACPC,gBAAiB,4BACjBL,YAAa,wBACbqB,KAAM,CAAC,CACHC,EAAG,EACHC,EAAG,GACJ,CACCD,EAAG,EACHC,EAAG,GACJ,CACCD,EAAG,EACHC,EAAG,GACJ,CACCD,EAAG,EACHC,EAAG,IAEPC,MAAM,GACR,CACEpB,MAAO,YACPC,gBAAiB,4BACjBL,YAAa,0BACbqB,KAAM,CAAC,CACHC,EAAG,GACHC,EAAG,GACJ,CACCD,EAAG,GACHC,EAAG,GACJ,CACCD,EAAG,GACHC,EAAG,GACJ,CACCD,EAAG,GACHC,EAAG,IAEPC,MAAM,SA1N1BxE,EAAA,GAAAM,EAAAJ,OAAAuE,EAAA,EAAAvE,CAAAD,EAAAyE,UAAA,UACKC,KADL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBAEa,CACL,yBACA,0BACA,4BALRxE,EAAAL,OAAAuE,EAAA,EAAAvE,CAAAD,EAAAyE,UAAA,iBAQKC,KARL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBASoB,4BATpBvE,EAAAN,OAAAuE,EAAA,EAAAvE,CAAAD,EAAAyE,UAAA,WAWKC,KAXL,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBAYc,CACN,CACIhC,GAAI,IACJkB,GAAI,QAfhBxD,EAAAP,OAAAuE,EAAA,EAAAvE,CAAAD,EAAAyE,UAAA,gBAmBKM,KAnBL,CAAAJ,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAE,EAAA7E,KAAA,OAoBmB,SAAC8E,EAAeC,GAC3BF,EAAKpC,QAAQuC,KAAK,CACdrC,GAAImC,EACJjB,GAAIkB,QAvBhBzE,EAAAR,OAAAuE,EAAA,EAAAvE,CAAAD,EAAAyE,UAAA,QA2BKM,KA3BL,CAAAJ,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAM,EAAAjF,KAAA,OA4BW,WACyB,IAAxBiF,EAAKxC,QAAQC,QACbuC,EAAKxC,QAAQyC,UA9BzB3E,EAAAT,OAAAuE,EAAA,EAAAvE,CAAAD,EAAAyE,UAAA,eAkCKM,KAlCL,CAAAJ,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,eAAAQ,EAAAnF,KAAA,OAmCkB,SAACoF,GACXD,EAAKtC,cAAgBuC,MApC7BtF,OAAAuE,EAAA,EAAAvE,CAAAD,EAAAyE,UAAA,mBAyCKe,KAzCLvF,OAAAwF,yBAAAzF,EAAAyE,UAAA,mBAAAzE,EAAAyE,WAAAxE,OAAAuE,EAAA,EAAAvE,CAAAD,EAAAyE,UAAA,WAmJKe,KAnJLvF,OAAAwF,yBAAAzF,EAAAyE,UAAA,WAAAzE,EAAAyE,WAAAzE,mBCiCe0F,iBA1BdC,yNAMGC,MAAQ,IAAI7F,0EAGR,OACI8F,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUJ,MAAOzF,KAAKyF,OAClBC,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACInC,QAASoC,YAAK/F,KAAKyF,MAAMO,iBACzB/B,KAAM8B,YAAK/F,KAAKyF,MAAMQ,WAE1BP,EAAAC,EAAAC,cAAA,UAAQxC,QAASpD,KAAKyF,MAAMS,MAA5B,+CAhBAC,kBCWLC,EAhBdZ,YACDa,EAAA,SAAAC,GAAA,SAAAF,IAAA,IAAAG,EAAA3F,EAAAd,OAAAC,EAAA,EAAAD,CAAAE,KAAAoG,GAAA,QAAAI,EAAAC,UAAA/D,OAAAgE,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GAAA,OAAAhG,EAAAd,OAAA+G,EAAA,EAAA/G,CAAAE,MAAAuG,EAAAzG,OAAAgH,EAAA,EAAAhH,CAAAsG,IAAAW,KAAAC,MAAAT,EAAA,CAAAvG,MAAAiH,OAAAP,MAEIjB,MAAQ,IAAI7F,EAFhBgB,EAAA,OAAAd,OAAAoH,EAAA,EAAApH,CAAAsG,EAAAE,GAAAxG,OAAAW,EAAA,EAAAX,CAAAsG,EAAA,EAAA1F,IAAA,SAAA8B,MAAA,WAKQ,OACIkD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUJ,MAAOzF,KAAKyF,OAClBC,EAAAC,EAAAC,cAAA,OAAKuB,MAAO,CAAE9F,SAAU,WAAY+F,MAAO,IAAKC,OAAQ,MACpD3B,EAAAC,EAAAC,cAAC0B,EAAD,YARpBlB,EAAA,CAAyBD,eAAzBE,ECFAkB,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.8c9d1479.chunk.js","sourcesContent":["import { observable, action, computed } from \"mobx\";\r\n\r\nexport class AppState {\r\n    @observable\r\n    colors = [\r\n        \"rgba(55, 55, 55, 0.75)\",\r\n        \"rgba(155, 155, 0, 0.75)\",\r\n        \"rgba(0, 66, 55, 0.75)\"\r\n    ];\r\n\r\n    @observable\r\n    selectedColor = \"rgba(55, 55, 55, 0.75)\";\r\n\r\n    @observable\r\n    history = [\r\n        {\r\n            x1: 3.5,\r\n            x2: 10\r\n        }\r\n    ]\r\n\r\n    @action\r\n    addToHistory = (newX1: number, newX2: number) => {\r\n        this.history.push({\r\n            x1: newX1,\r\n            x2: newX2\r\n        })\r\n    }\r\n\r\n    @action\r\n    undo = () => {\r\n        if (this.history.length !== 1) {\r\n            this.history.pop();\r\n        }\r\n    }\r\n\r\n    @action\r\n    selectColor = (color: string) => {\r\n        this.selectedColor = color;\r\n    }\r\n\r\n    annotationKey = 1;\r\n\r\n    @computed\r\n    get getChartOptions() {\r\n        let key1 = \"x\" + this.annotationKey++;\r\n        let key2 = \"y\" + this.annotationKey++;\r\n        return {\r\n            legend: {\r\n                display: true\r\n            },\r\n            responsive: true,\r\n            spangaps: true,\r\n            scales: {\r\n                xAxes: [{\r\n                    position: 'bottom',\r\n                    type: 'linear',\r\n                    gridLines: {\r\n                        //zeroLineColor: \"rgba(0,255,0,1)\"\r\n                    },\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'x axis'\r\n                    },\r\n                    ticks: {\r\n                        maxRotation: 0,\r\n                        reverse: false\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    position: 'left',\r\n                    gridLines: {\r\n                        //zeroLineColor: \"rgba(0,255,0,1)\"\r\n                    },\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'y axis'\r\n                    },\r\n                    ticks: {\r\n                        reverse: false,\r\n                        beginAtZero: true,\r\n                        min: 0,\r\n                        max: 10,\r\n                    }\r\n                }]\r\n            },\r\n            annotation: {\r\n                events: ['click', 'onMouseup'],\r\n                annotations: [\r\n                    {\r\n                        drawTime: \"afterDatasetsDraw\",\r\n                        id: key1,\r\n                        type: \"line\",\r\n                        mode: \"vertical\",\r\n                        scaleID: \"x-axis-0\",\r\n                        value: this.history[this.history.length - 1].x1,\r\n                        borderColor: this.selectedColor,\r\n                        borderWidth: 5,\r\n                        draggable: true,\r\n                        label: {\r\n                            backgroundColor: this.selectedColor,\r\n                            content: \"Selector 1\",\r\n                            enabled: true,\r\n                            position: 'bottom'\r\n                        },\r\n                        onClick: function (e: React.FormEvent<HTMLInputElement>) {\r\n                            //console.log(\"Annotation\", e.type, this);\r\n                        },\r\n                        onDrag: function (event: any) {\r\n                            //console.log(event);                                            \r\n                        },\r\n                        onDragEnd: (event: any) => {\r\n                            let value = event.subject.element.options.value;\r\n                            this.addToHistory(value, this.history[this.history.length - 1].x2);\r\n                            //console.log(toJS(this.history));\r\n                        }\r\n                    }, {\r\n                        drawTime: \"afterDatasetsDraw\",\r\n                        id: key2,\r\n                        type: \"line\",\r\n                        mode: \"vertical\",\r\n                        scaleID: \"x-axis-0\",\r\n                        value: this.history[this.history.length - 1].x2,\r\n                        borderColor: this.selectedColor,\r\n                        borderWidth: 5,\r\n                        draggable: true,\r\n                        label: {\r\n                            backgroundColor: this.selectedColor,\r\n                            content: \"Selector 2\",\r\n                            enabled: true,\r\n                            position: 'bottom'\r\n                        },\r\n                        onClick: function (e: React.FormEvent<HTMLInputElement>) {\r\n                            //console.log(\"Annotation\", e.type, this);\r\n                        },\r\n                        onDrag: function (e: React.FormEvent<HTMLInputElement>) {\r\n                            //console.log(e.subject.config.value);\r\n                        },\r\n                        onDragEnd: (event: any) => {\r\n                            let value = event.subject.element.options.value;\r\n                            this.addToHistory(this.history[this.history.length - 1].x1, value);\r\n                            //console.log(toJS(this.history));\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get getData() {\r\n        return {\r\n            labels: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"],\r\n            category: 'linear',\r\n            datasets: [\r\n                {\r\n                    label: \"Dataset 1\",\r\n                    backgroundColor: \"rgba(122, 122, 122, 0.25)\",\r\n                    borderColor: \"rgba(122, 122, 122, 0.75)\",\r\n                    data: [{\r\n                        x: 0,\r\n                        y: 1,\r\n                    }, {\r\n                        x: 2,\r\n                        y: 4,\r\n                    }, {\r\n                        x: 3,\r\n                        y: 2,\r\n                    }],\r\n                    fill: true,\r\n                },{\r\n                    label: \"Dataset 2\",\r\n                    backgroundColor: \"rgba(122, 122, 122, 0.25)\",\r\n                    borderColor: \"rgba(228, 112, 112, 0.75)\",\r\n                    data: [{\r\n                        x: 4,\r\n                        y: 3,\r\n                    }, {\r\n                        x: 5,\r\n                        y: 5,\r\n                    }, {\r\n                        x: 6,\r\n                        y: 2,\r\n                    }],\r\n                    fill: true,\r\n                },{\r\n                    label: \"Dataset 3\",\r\n                    backgroundColor: \"rgba(122, 122, 122, 0.25)\",\r\n                    borderColor: \"rgba(255, 0, 0, 0.75)\",\r\n                    data: [{\r\n                        x: 6,\r\n                        y: 2,\r\n                    }, {\r\n                        x: 7,\r\n                        y: 3,\r\n                    }, {\r\n                        x: 8,\r\n                        y: 4,\r\n                    }, {\r\n                        x: 9,\r\n                        y: 2,\r\n                    }],\r\n                    fill: true,\r\n                },{\r\n                    label: \"Dataset 4\",\r\n                    backgroundColor: \"rgba(122, 122, 122, 0.25)\",\r\n                    borderColor: \"rgba(61, 61, 255, 0.75)\",\r\n                    data: [{\r\n                        x: 11,\r\n                        y: 3,\r\n                    }, {\r\n                        x: 12,\r\n                        y: 2,\r\n                    }, {\r\n                        x: 13,\r\n                        y: 4,\r\n                    }, {\r\n                        x: 14,\r\n                        y: 7,\r\n                    }],\r\n                    fill: true,\r\n                },\r\n\r\n            ]\r\n        }\r\n    }\r\n}\r\n\r\n// decorate(AppState, {\r\n//     colors: observable,\r\n//     selectedColor: observable,\r\n//     selectColor: action,\r\n//     getData: computed,\r\n//     //getChartOptions: computed\r\n// });","import React, { Component } from 'react';\r\nimport { observer, Provider } from 'mobx-react';\r\nimport { AppState } from '../AppState';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { toJS } from 'mobx';\r\n// import SelectColor from './SelectColor'\r\nimport 'chartjs-plugin-annotation';\r\nimport 'chartjs-plugin-draggable';\r\n\r\n@observer\r\nclass Chart extends Component<{ store?: AppState }> {\r\n    // constructor(props: { store?: AppState }) {\r\n    //     super(props);\r\n    // }\r\n\r\n    store = new AppState();\r\n\r\n    render() {\r\n        return (\r\n            <Provider store={this.store}>\r\n                <div>\r\n                    {/* <SelectColor /> */}                    \r\n                    <Line\r\n                        options={toJS(this.store.getChartOptions)}\r\n                        data={toJS(this.store.getData)}\r\n                    />\r\n                    <button onClick={this.store.undo}>Revert selectors to previous state</button>\r\n                </div>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Chart;","import React, { Component } from 'react';\r\nimport { AppState } from './AppState';\r\nimport { Provider, observer } from 'mobx-react';\r\nimport Chart from './components/Chart'\r\n\r\n@observer\r\nexport class App extends Component<any> {\r\n\r\n    store = new AppState();\r\n\r\n    render() {\r\n        return (\r\n            <Provider store={this.store}>\r\n                <div style={{ position: \"relative\", width: 600, height: 550 }}>\r\n                    <Chart />\r\n                </div>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}