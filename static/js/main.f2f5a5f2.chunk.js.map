{"version":3,"sources":["AppState.tsx","components/Chart.tsx","App.tsx","index.tsx"],"names":["AppState","_class","Object","classCallCheck","this","selectedColor","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","annotationKey","createClass","key","get","_this","key1","key2","legend","display","responsive","spangaps","scales","xAxes","position","type","gridLines","scaleLabel","labelString","ticks","maxRotation","reverse","yAxes","beginAtZero","min","max","annotation","events","annotations","drawTime","id","mode","scaleID","value","history","length","x1","borderColor","borderWidth","draggable","label","backgroundColor","content","enabled","onClick","e","onDrag","event","onDragEnd","subject","element","options","addToHistory","x2","labels","category","datasets","data","x","y","fill","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","_this2","newX1","newX2","push","_this3","pop","computed","getOwnPropertyDescriptor","Chart","observer","react_default","a","createElement","es","toJS","props","store","getChartOptions","getData","undo","Component","App","App_class","_Component","_getPrototypeOf2","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","inherits","style","width","height","components_Chart","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f2f5a5f2.chunk.js","sourcesContent":["import { observable, action, computed } from \"mobx\";\r\n\r\nexport class AppState {\r\n    \r\n    selectedColor = \"rgba(55, 55, 55, 0.75)\";\r\n\r\n    @observable\r\n    history = [\r\n        {\r\n            x1: 3.5,\r\n            x2: 10\r\n        }\r\n    ]\r\n\r\n    @action\r\n    addToHistory = (newX1: number, newX2: number) => {\r\n        this.history.push({\r\n            x1: newX1,\r\n            x2: newX2\r\n        })\r\n    }\r\n\r\n    @action\r\n    undo = () => {\r\n        if (this.history.length !== 1) {\r\n            this.history.pop();\r\n        }\r\n    }\r\n\r\n    annotationKey = 1;\r\n\r\n    @computed\r\n    get getChartOptions() {\r\n        let key1 = \"x\" + this.annotationKey++;\r\n        let key2 = \"y\" + this.annotationKey++;\r\n        return {\r\n            legend: {\r\n                display: true\r\n            },\r\n            responsive: true,\r\n            spangaps: true,\r\n            scales: {\r\n                xAxes: [{\r\n                    position: 'bottom',\r\n                    type: 'linear',\r\n                    gridLines: {\r\n                    },\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'x axis'\r\n                    },\r\n                    ticks: {\r\n                        maxRotation: 0,\r\n                        reverse: false\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                    position: 'left',\r\n                    gridLines: {\r\n                    },\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'y axis'\r\n                    },\r\n                    ticks: {\r\n                        reverse: false,\r\n                        beginAtZero: true,\r\n                        min: 0,\r\n                        max: 10,\r\n                    }\r\n                }]\r\n            },\r\n            annotation: {\r\n                events: ['click', 'onMouseup'],\r\n                annotations: [\r\n                    {\r\n                        drawTime: \"afterDatasetsDraw\",\r\n                        // Have to assign new id every time annotation property changes, otherwise mobx event doesn't trigger\r\n                        id: key1,\r\n                        type: \"line\",\r\n                        mode: \"vertical\",\r\n                        scaleID: \"x-axis-0\",\r\n                        value: this.history[this.history.length - 1].x1,\r\n                        borderColor: this.selectedColor,\r\n                        borderWidth: 5,\r\n                        draggable: true,\r\n                        label: {\r\n                            backgroundColor: this.selectedColor,\r\n                            content: \"Selector 1\",\r\n                            enabled: true,\r\n                            position: 'bottom'\r\n                        },\r\n                        onClick: function (e: React.FormEvent<HTMLInputElement>) {\r\n                        },\r\n                        onDrag: function (event: any) {                                      \r\n                        },\r\n                        onDragEnd: (event: any) => {\r\n                            let value = event.subject.element.options.value;\r\n                            this.addToHistory(value, this.history[this.history.length - 1].x2);\r\n                        }\r\n                    }, {\r\n                        drawTime: \"afterDatasetsDraw\",\r\n                        // Have to assign new id every time annotation property changes, otherwise mobx event doesn't trigger\r\n                        id: key2,\r\n                        type: \"line\",\r\n                        mode: \"vertical\",\r\n                        scaleID: \"x-axis-0\",\r\n                        value: this.history[this.history.length - 1].x2,\r\n                        borderColor: this.selectedColor,\r\n                        borderWidth: 5,\r\n                        draggable: true,\r\n                        label: {\r\n                            backgroundColor: this.selectedColor,\r\n                            content: \"Selector 2\",\r\n                            enabled: true,\r\n                            position: 'bottom'\r\n                        },\r\n                        onClick: function (e: React.FormEvent<HTMLInputElement>) {\r\n\r\n                        },\r\n                        onDrag: function (e: React.FormEvent<HTMLInputElement>) {\r\n\r\n                        },\r\n                        onDragEnd: (event: any) => {\r\n                            let value = event.subject.element.options.value;\r\n                            this.addToHistory(this.history[this.history.length - 1].x1, value);\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get getData() {\r\n        return {\r\n            labels: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"],\r\n            category: 'linear',\r\n            datasets: [\r\n                {\r\n                    label: \"Dataset 1\",\r\n                    backgroundColor: \"rgba(122, 122, 122, 0.25)\",\r\n                    borderColor: \"rgba(122, 122, 122, 0.75)\",\r\n                    data: [{\r\n                        x: 0,\r\n                        y: 1,\r\n                    }, {\r\n                        x: 2,\r\n                        y: 4,\r\n                    }, {\r\n                        x: 3,\r\n                        y: 2,\r\n                    }],\r\n                    fill: true,\r\n                },{\r\n                    label: \"Dataset 2\",\r\n                    backgroundColor: \"rgba(122, 122, 122, 0.25)\",\r\n                    borderColor: \"rgba(228, 112, 112, 0.75)\",\r\n                    data: [{\r\n                        x: 4,\r\n                        y: 3,\r\n                    }, {\r\n                        x: 5,\r\n                        y: 5,\r\n                    }, {\r\n                        x: 6,\r\n                        y: 2,\r\n                    }],\r\n                    fill: true,\r\n                },{\r\n                    label: \"Dataset 3\",\r\n                    backgroundColor: \"rgba(122, 122, 122, 0.25)\",\r\n                    borderColor: \"rgba(255, 0, 0, 0.75)\",\r\n                    data: [{\r\n                        x: 6,\r\n                        y: 2,\r\n                    }, {\r\n                        x: 7,\r\n                        y: 3,\r\n                    }, {\r\n                        x: 8,\r\n                        y: 4,\r\n                    }, {\r\n                        x: 9,\r\n                        y: 2,\r\n                    }],\r\n                    fill: true,\r\n                },{\r\n                    label: \"Dataset 4\",\r\n                    backgroundColor: \"rgba(122, 122, 122, 0.25)\",\r\n                    borderColor: \"rgba(61, 61, 255, 0.75)\",\r\n                    data: [{\r\n                        x: 11,\r\n                        y: 3,\r\n                    }, {\r\n                        x: 12,\r\n                        y: 2,\r\n                    }, {\r\n                        x: 13,\r\n                        y: 4,\r\n                    }, {\r\n                        x: 14,\r\n                        y: 7,\r\n                    }],\r\n                    fill: true,\r\n                },\r\n\r\n            ]\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { AppState } from '../AppState';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { toJS } from 'mobx';\r\nimport 'chartjs-plugin-annotation';\r\nimport 'chartjs-plugin-draggable';\r\n\r\n@observer\r\nclass Chart extends Component<{ store?: AppState }> {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Line\r\n                    options={toJS(this.props.store!.getChartOptions)}\r\n                    data={toJS(this.props.store!.getData)}\r\n                />\r\n                <button onClick={this.props.store!.undo}>Revert selectors to previous state</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Chart;","import React, { Component } from 'react';\r\nimport { AppState } from './AppState';\r\nimport { observer } from 'mobx-react';\r\nimport Chart from './components/Chart'\r\n\r\n@observer\r\nexport class App extends Component {\r\n\r\n    store = new AppState();\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ position: \"relative\", width: 600, height: 550 }}>\r\n                <Chart store={this.store} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}